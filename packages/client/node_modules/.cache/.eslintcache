[{"/Users/dev/Learning/assignment/kordis 2/packages/client/src/App.js":"1","/Users/dev/Learning/assignment/kordis 2/packages/client/src/index.js":"2","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/useGetSpreadsheet.js":"3","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/index.js":"4","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/getTransformedData.js":"5","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/getColumns.js":"6","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/useSpreadsheetTable.js":"7","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/index.js":"8","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/Sidebar.js":"9","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/SpreadsheetList.js":"10"},{"size":384,"mtime":1687497532394,"results":"11","hashOfConfig":"12"},{"size":233,"mtime":1687481687074,"results":"13","hashOfConfig":"12"},{"size":324,"mtime":1687487160871,"results":"14","hashOfConfig":"12"},{"size":2350,"mtime":1687502194989,"results":"15","hashOfConfig":"12"},{"size":722,"mtime":1687498606553,"results":"16","hashOfConfig":"12"},{"size":1538,"mtime":1687486077500,"results":"17","hashOfConfig":"12"},{"size":1909,"mtime":1687500963514,"results":"18","hashOfConfig":"12"},{"size":313,"mtime":1687498113638,"results":"19","hashOfConfig":"12"},{"size":395,"mtime":1687502240320,"results":"20","hashOfConfig":"12"},{"size":586,"mtime":1687498113636,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1yg1v5",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dev/Learning/assignment/kordis 2/packages/client/src/App.js",[],[],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/index.js",[],[],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/useGetSpreadsheet.js",[],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/index.js",["56"],[],"import React, { useEffect, useMemo, useState } from \"react\";\nimport getTransformedData from \"./getTransformedData\";\nimport { useSpreadsheetTable } from \"./useSpreadsheetTable\";\nimport getColumns from \"./getColumns\";\nimport \"./index.css\";\n\nconst SpreadSheetTable = ({ value }) => {\n  const [tableMeta, setTableMeta] = useState(value);\n  const [tableData, setTableData] = useState([]);\n\n  const transformedData = getTransformedData(tableMeta.data, tableMeta);\n  const columns = useMemo(() => getColumns(tableMeta), [tableMeta]);\n\n  useEffect(() => {\n    if (Object.keys(tableMeta).length) {\n      setTableData(\n        transformedData.reduce((acc, value) => {\n          Object.keys(value).forEach((key) => {\n            acc.push(value[key]);\n          });\n          return acc;\n        }, [])\n      );\n    }\n  }, [setTableData, transformedData]);\n\n  const { table, flexRender } = useSpreadsheetTable(\n    tableData,\n    columns,\n    setTableMeta\n  );\n\n  if (!tableData) return <></>;\n\n  return (\n    <>\n      <div className=\"spreadsheet-text\">Spreadsheet</div>\n      <table className=\"table\">\n        <thead>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <th key={header.id} colSpan={header.colSpan}>\n                    {header.isPlaceholder ? null : (\n                      <div>\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                      </div>\n                    )}\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody>\n          {table.getRowModel().rows.map((row) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => {\n                  return (\n                    <td key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default SpreadSheetTable;\n","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/getTransformedData.js",[],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/getColumns.js",["57"],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/SpreadSheet/useSpreadsheetTable.js",["58"],[],"import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getExpandedRowModel,\n  flexRender,\n} from \"@tanstack/react-table\";\n\nconst EditableInput = ({ table, column, row, getValue }) => {\n  const initialValue = getValue();\n  const [value, setValue] = useState(initialValue);\n  const disabled = row.original[column.id].includes(\"(\");\n\n  useEffect(() => setValue(initialValue), [initialValue]);\n\n  const onBlur = () => table.options.meta?.updateData(row, column, value);\n\n  return (\n    <input\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onBlur={onBlur}\n      readOnly={disabled}\n      disabled={disabled}\n      style={{\n        border: \"none\",\n        borderRadius: 5,\n        padding: \"2px\",\n        color: \"#333\",\n        fontWeight: disabled ? 900 : 500,\n        outline: \"none\",\n        textAlign: \"center\",\n        backgroundColor: disabled ? \"lightgray\" : \"white\",\n      }}\n    />\n  );\n};\n\nconst defaultColumn = {\n  cell: ({ getValue, row, column, table }) => (\n    <EditableInput\n      table={table}\n      column={column}\n      row={row}\n      getValue={getValue}\n    />\n  ),\n};\n\nexport function useSpreadsheetTable(data, columns, setTableMeta) {\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn,\n    getSubRows: (rows) => rows.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (row, column, value) => {\n        setTableMeta((prevTableMeta) => {\n          return {\n            ...prevTableMeta,\n            data: {\n              ...prevTableMeta.data,\n              [row.original.index]: {\n                ...prevTableMeta.data[row.original.index],\n                [column.id]: value,\n              },\n            },\n          };\n        });\n      },\n    },\n    debugTable: true,\n  });\n\n  return { table, flexRender };\n}\n","/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/index.js",[],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/Sidebar.js",["59","60"],[],"/Users/dev/Learning/assignment/kordis 2/packages/client/src/components/Layout/SpreadsheetList.js",["61"],[],{"ruleId":"62","severity":1,"message":"63","line":25,"column":6,"nodeType":"64","endLine":25,"endColumn":37,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":5,"column":7,"nodeType":"68","messageId":"69","endLine":5,"endColumn":11},{"ruleId":"70","severity":1,"message":"71","line":1,"column":28,"nodeType":"72","messageId":"73","endLine":1,"endColumn":35},{"ruleId":"70","severity":1,"message":"74","line":4,"column":7,"nodeType":"72","messageId":"73","endLine":4,"endColumn":22},{"ruleId":"75","severity":1,"message":"76","line":13,"column":9,"nodeType":"77","endLine":13,"endColumn":46},{"ruleId":"75","severity":1,"message":"76","line":12,"column":13,"nodeType":"77","endLine":15,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tableMeta'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'SIDEBAR_CLASSES' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"79","fix":"80"},"Update the dependencies array to be: [setTableData, tableMeta, transformedData]",{"range":"81","text":"82"},[811,842],"[setTableData, tableMeta, transformedData]"]
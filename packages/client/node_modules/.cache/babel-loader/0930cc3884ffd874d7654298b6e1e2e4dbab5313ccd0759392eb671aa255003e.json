{"ast":null,"code":"const range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n// const newPerson = (): any=> {\n//   return {\n//     data: faker.name.firstName(),\n//     lastName: faker.name.lastName(),\n//     jan: faker.datatype.number(40),\n//     feb: faker.datatype.number(1000),\n//     progress: faker.datatype.number(100),\n//     status: faker.helpers.shuffle<Person['status']>([\n//       'relationship',\n//       'complicated',\n//       'single',\n//     ])[0]!,\n//   }\n// }\n\nexport function makeData() {\n  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {\n    lens[_key] = arguments[_key];\n  }\n  const makeDataLevel = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const len = lens[depth];\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n  return makeDataLevel();\n}","map":{"version":3,"names":["range","len","arr","i","push","makeData","_len","arguments","length","lens","Array","_key","makeDataLevel","depth","undefined","map","d","newPerson","subRows"],"sources":["/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/makeData.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker'\n\nexport type Person = {\n  data: string\n  jan: string\n  feb: string\n  mar: number\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n// const newPerson = (): any=> {\n//   return {\n//     data: faker.name.firstName(),\n//     lastName: faker.name.lastName(),\n//     jan: faker.datatype.number(40),\n//     feb: faker.datatype.number(1000),\n//     progress: faker.datatype.number(100),\n//     status: faker.helpers.shuffle<Person['status']>([\n//       'relationship',\n//       'complicated',\n//       'single',\n//     ])[0]!,\n//   }\n// }\n\n\n\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}"],"mappings":"AASA,MAAMA,KAAK,GAAIC,GAAW,IAAK;EAC7B,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5BD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;EACb;EACA,OAAOD,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,OAAO,SAASG,QAAQA,CAAA,EAAoB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC9B,MAAMC,aAAa,GAAG,SAAAA,CAAA,EAAyB;IAAA,IAAxBC,KAAK,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAG,CAAC;IAC9B,MAAMN,GAAG,GAAGQ,IAAI,CAACI,KAAK,CAAE;IACxB,OAAOb,KAAK,CAACC,GAAG,CAAC,CAACc,GAAG,CAAEC,CAAC,IAAa;MACnC,OAAO;QACL,GAAGC,SAAS,CAAC,CAAC;QACdC,OAAO,EAAET,IAAI,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGD,aAAa,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGC;MACxD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OAAOF,aAAa,CAAC,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
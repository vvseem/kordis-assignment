{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Learning/assignment/kordis 2/packages/client/src/SpreadSheet/getColumns.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getComputedCell = (row, column, originalRows, computedRows) => {\n  var _eval;\n  computedRows[row] = {\n    ...computedRows[row],\n    [column]: (_eval = eval(originalRows[row][column].replace(/'(.+?)'&'(.+?)'/g, (_, _row, _column) => {\n      var _computedRows$_row$_c, _computedRows$_row;\n      return (_computedRows$_row$_c = computedRows === null || computedRows === void 0 ? void 0 : (_computedRows$_row = computedRows[_row]) === null || _computedRows$_row === void 0 ? void 0 : _computedRows$_row[_column]) !== null && _computedRows$_row$_c !== void 0 ? _computedRows$_row$_c : getComputedCell(_row, _column, originalRows, computedRows);\n    }))) !== null && _eval !== void 0 ? _eval : 0\n  };\n  return computedRows[row][column];\n};\nconst ItemCell = _ref => {\n  let {\n    row,\n    getValue\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: `${row.depth * 2}rem`\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [row.getCanExpand() ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: row.getToggleExpandedHandler(),\n        style: {\n          cursor: \"pointer\"\n        },\n        children: row.getIsExpanded() ? \"^\" : \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this) : \"\", getValue()]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n// export const col = (data) => {\n//   const computedRows = {};\n//\n//   return data?.headers?.map((e) => {\n//     return {\n//       accessorFn: (row) => {\n//         if (e !== \"item\")\n//           return getComputedCell(row.index, e, data.data, computedRows).toFixed(\n//             2\n//           );\n//         return row[e];\n//       },\n//       accessorKey: e,\n//       ...(e === \"item\" && {\n//         cell: ({ row, getValue }) => {\n//           return (\n//             <div\n//               style={{\n//                 paddingLeft: `${row.depth * 2}rem`,\n//               }}\n//             >\n//               <>\n//                 {row.getCanExpand() ? (\n//                   <button\n//                     {...{\n//                       onClick: row.getToggleExpandedHandler(),\n//                       style: { cursor: \"pointer\" },\n//                     }}\n//                   >\n//                     {row.getIsExpanded() ? \"^\" : \">\"}\n//                   </button>\n//                 ) : (\n//                   \"\"\n//                 )}{\" \"}\n//                 {getValue()}\n//               </>\n//             </div>\n//           );\n//         },\n//       }),\n//       header: () => e.toUpperCase(),\n//       footer: (props) => props.column.id,\n//     };\n//   });\n// };\n_c = ItemCell;\nconst getColumns = data => {\n  var _data$headers;\n  const computedRows = {};\n  return data === null || data === void 0 ? void 0 : (_data$headers = data.headers) === null || _data$headers === void 0 ? void 0 : _data$headers.map(e => {\n    return {\n      accessorFn: row => {\n        if (e !== \"item\") return getComputedCell(row.index, e, data.data, computedRows).toFixed(2);\n        return row[e];\n      },\n      accessorKey: e,\n      ...(e === \"item\" && {\n        cell: _ref2 => {\n          let {\n            row,\n            getValue\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingLeft: `${row.depth * 2}rem`\n            },\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [row.getCanExpand() ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: row.getToggleExpandedHandler(),\n                style: {\n                  cursor: \"pointer\"\n                },\n                children: row.getIsExpanded() ? \"^\" : \">\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this) : \"\", \" \", getValue()]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this);\n        }\n      }),\n      header: () => e.toUpperCase(),\n      footer: props => props.column.id\n    };\n  });\n};\nexport default getColumns;\nvar _c;\n$RefreshReg$(_c, \"ItemCell\");","map":{"version":3,"names":["getComputedCell","row","column","originalRows","computedRows","_eval","eval","replace","_","_row","_column","_computedRows$_row$_c","_computedRows$_row","ItemCell","_ref","getValue","_jsxDEV","style","paddingLeft","depth","children","_Fragment","getCanExpand","onClick","getToggleExpandedHandler","cursor","getIsExpanded","fileName","_jsxFileName","lineNumber","columnNumber","_c","getColumns","data","_data$headers","headers","map","e","accessorFn","index","toFixed","accessorKey","cell","_ref2","header","toUpperCase","footer","props","id","$RefreshReg$"],"sources":["/Users/dev/Learning/assignment/kordis 2/packages/client/src/SpreadSheet/getColumns.js"],"sourcesContent":["const getComputedCell = (row, column, originalRows, computedRows) => {\n  computedRows[row] = {\n    ...computedRows[row],\n    [column]:\n      eval(\n        originalRows[row][column].replace(\n          /'(.+?)'&'(.+?)'/g,\n          (_, _row, _column) => {\n            return (\n              computedRows?.[_row]?.[_column] ??\n              getComputedCell(_row, _column, originalRows, computedRows)\n            );\n          }\n        )\n      ) ?? 0,\n  };\n\n  return computedRows[row][column];\n};\n\nconst ItemCell = ({ row, getValue }) => {\n  return (\n    <div\n      style={{\n        paddingLeft: `${row.depth * 2}rem`,\n      }}\n    >\n      <>\n        {row.getCanExpand() ? (\n          <button\n            {...{\n              onClick: row.getToggleExpandedHandler(),\n              style: { cursor: \"pointer\" },\n            }}\n          >\n            {row.getIsExpanded() ? \"^\" : \">\"}\n          </button>\n        ) : (\n          \"\"\n        )}\n        {getValue()}\n      </>\n    </div>\n  );\n};\n\n// export const col = (data) => {\n//   const computedRows = {};\n//\n//   return data?.headers?.map((e) => {\n//     return {\n//       accessorFn: (row) => {\n//         if (e !== \"item\")\n//           return getComputedCell(row.index, e, data.data, computedRows).toFixed(\n//             2\n//           );\n//         return row[e];\n//       },\n//       accessorKey: e,\n//       ...(e === \"item\" && {\n//         cell: ({ row, getValue }) => {\n//           return (\n//             <div\n//               style={{\n//                 paddingLeft: `${row.depth * 2}rem`,\n//               }}\n//             >\n//               <>\n//                 {row.getCanExpand() ? (\n//                   <button\n//                     {...{\n//                       onClick: row.getToggleExpandedHandler(),\n//                       style: { cursor: \"pointer\" },\n//                     }}\n//                   >\n//                     {row.getIsExpanded() ? \"^\" : \">\"}\n//                   </button>\n//                 ) : (\n//                   \"\"\n//                 )}{\" \"}\n//                 {getValue()}\n//               </>\n//             </div>\n//           );\n//         },\n//       }),\n//       header: () => e.toUpperCase(),\n//       footer: (props) => props.column.id,\n//     };\n//   });\n// };\n\nconst getColumns = (data) => {\n  const computedRows = {};\n\n  return data?.headers?.map((e) => {\n    return {\n      accessorFn: (row) => {\n        if (e !== \"item\")\n          return getComputedCell(row.index, e, data.data, computedRows).toFixed(\n            2\n          );\n        return row[e];\n      },\n      accessorKey: e,\n      ...(e === \"item\" && {\n        cell: ({ row, getValue }) => {\n          return (\n            <div\n              style={{\n                paddingLeft: `${row.depth * 2}rem`,\n              }}\n            >\n              <>\n                {row.getCanExpand() ? (\n                  <button\n                    {...{\n                      onClick: row.getToggleExpandedHandler(),\n                      style: { cursor: \"pointer\" },\n                    }}\n                  >\n                    {row.getIsExpanded() ? \"^\" : \">\"}\n                  </button>\n                ) : (\n                  \"\"\n                )}{\" \"}\n                {getValue()}\n              </>\n            </div>\n          );\n        },\n      }),\n      header: () => e.toUpperCase(),\n      footer: (props) => props.column.id,\n    };\n  });\n};\n\nexport default getColumns;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/Project/spreadsheet-app/kordis/packages/client/src/customHook/useCreAteTable.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useReactTable, getCoreRowModel, getExpandedRowModel, flexRender } from '@tanstack/react-table';\n// import { makeData, Person } from './makeData'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableInput = props => {\n  console.log(props);\n  //   const initialValue = getValue()\n  //   const [value, setValue] = React.useState(initialValue)\n\n  //   const onBlur = () => {\n  //     table.options.meta?.updateData(index, id, value)\n  //   }\n  //   console.log(table)\n  // console.log('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC',getValue(), id, index, table.getRow(id));\n\n  //   React.useEffect(() => {\n  //     setValue(initialValue)\n  //   }, [initialValue])\n\n  //   return (\n  //     <input\n  //       value={value as string}\n  //       onChange={e => setValue(e.target.value)}\n  //       onBlur={onBlur}\n  //       style={{\n  //         border: \"none\",\n  //         borderRadius: 5,\n  //         padding: \"2px\",\n  //         color: \"#333\",\n  //         backgroundColor: \"#E5E4E2\",\n  //         outline: \"none\",\n  //         textAlign: \"center\"\n  //       }}\n  //     />\n  //   )\n};\n_c = EditableInput;\nconst defaultColumn = {\n  cell: _ref => {\n    let {\n      getValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      table\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(EditableInput, {\n      table: table,\n      id: id,\n      index: index,\n      getValue: getValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n};\nexport function useTable(x, data) {\n  _s();\n  const columns = React.useMemo(() => x, [x]);\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn,\n    getSubRows: row => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex, columnId, value) => {}\n    },\n    debugTable: true\n  });\n  return {\n    table,\n    flexRender\n  };\n}\n_s(useTable, \"4hPNPOVD6NmFgooi8etqClAnRtQ=\", false, function () {\n  return [useReactTable];\n});\nvar _c;\n$RefreshReg$(_c, \"EditableInput\");","map":{"version":3,"names":["React","useReactTable","getCoreRowModel","getExpandedRowModel","flexRender","jsxDEV","_jsxDEV","EditableInput","props","console","log","_c","defaultColumn","cell","_ref","getValue","row","index","column","id","table","fileName","_jsxFileName","lineNumber","columnNumber","useTable","x","data","_s","columns","useMemo","getSubRows","subRows","meta","updateData","rowIndex","columnId","value","debugTable","$RefreshReg$"],"sources":["/home/ubuntu/Desktop/Project/spreadsheet-app/kordis/packages/client/src/customHook/useCreAteTable.tsx"],"sourcesContent":["import React from 'react'\n\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getExpandedRowModel,\n  ColumnDef,\n  flexRender,\n  RowData\n} from '@tanstack/react-table'\n// import { makeData, Person } from './makeData'\nimport { col } from '../Spreadsheet/data'\n\ndeclare module '@tanstack/react-table' {\n  interface TableMeta<TData extends RowData> {\n    updateData: (rowIndex: number, columnId: string, value: unknown) => void\n  }\n}\n\nconst EditableInput = (props: any) => {\n  console.log(props)\n//   const initialValue = getValue()\n//   const [value, setValue] = React.useState(initialValue)\n\n//   const onBlur = () => {\n//     table.options.meta?.updateData(index, id, value)\n//   }\n//   console.log(table)\n// console.log('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC',getValue(), id, index, table.getRow(id));\n\n//   React.useEffect(() => {\n//     setValue(initialValue)\n//   }, [initialValue])\n\n//   return (\n//     <input\n//       value={value as string}\n//       onChange={e => setValue(e.target.value)}\n//       onBlur={onBlur}\n//       style={{\n//         border: \"none\",\n//         borderRadius: 5,\n//         padding: \"2px\",\n//         color: \"#333\",\n//         backgroundColor: \"#E5E4E2\",\n//         outline: \"none\",\n//         textAlign: \"center\"\n//       }}\n//     />\n//   )\n}\n\nconst defaultColumn: Partial<ColumnDef<any>> = {\n  cell: ({ \n    getValue,\n    row: { index },\n    column: { id },\n    table \n  }) => <EditableInput table={table} id={id} index={index} getValue={getValue} />,\n}\n\nexport function useTable(x:any, data:any) {\n  const columns = React.useMemo<ColumnDef<any>[]>(\n    () => x,\n    [x]\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn,\n    getSubRows: (row: any) => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex: any, columnId: any, value: any) => {\n      },\n    },\n    debugTable: true,\n  })\n  return { table, flexRender }\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SACEC,aAAa,EACbC,eAAe,EACfC,mBAAmB,EAEnBC,UAAU,QAEL,uBAAuB;AAC9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,aAAa,GAAIC,KAAU,IAAK;EACpCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC;AAAAG,EAAA,GA/BKJ,aAAa;AAiCnB,MAAMK,aAAsC,GAAG;EAC7CC,IAAI,EAAEC,IAAA;IAAA,IAAC;MACLC,QAAQ;MACRC,GAAG,EAAE;QAAEC;MAAM,CAAC;MACdC,MAAM,EAAE;QAAEC;MAAG,CAAC;MACdC;IACF,CAAC,GAAAN,IAAA;IAAA,oBAAKR,OAAA,CAACC,aAAa;MAACa,KAAK,EAAEA,KAAM;MAACD,EAAE,EAAEA,EAAG;MAACF,KAAK,EAAEA,KAAM;MAACF,QAAQ,EAAEA;IAAS;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;AACjF,CAAC;AAED,OAAO,SAASC,QAAQA,CAACC,CAAK,EAAEC,IAAQ,EAAE;EAAAC,EAAA;EACxC,MAAMC,OAAO,GAAG7B,KAAK,CAAC8B,OAAO,CAC3B,MAAMJ,CAAC,EACP,CAACA,CAAC,CACJ,CAAC;EAED,MAAMN,KAAK,GAAGnB,aAAa,CAAC;IAC1B0B,IAAI;IACJE,OAAO;IACPjB,aAAa;IACbmB,UAAU,EAAGf,GAAQ,IAAKA,GAAG,CAACgB,OAAO;IACrC9B,eAAe,EAAEA,eAAe,CAAC,CAAC;IAClCC,mBAAmB,EAAEA,mBAAmB,CAAC,CAAC;IAC1C8B,IAAI,EAAE;MACJC,UAAU,EAAEA,CAACC,QAAa,EAAEC,QAAa,EAAEC,KAAU,KAAK,CAC1D;IACF,CAAC;IACDC,UAAU,EAAE;EACd,CAAC,CAAC;EACF,OAAO;IAAElB,KAAK;IAAEhB;EAAW,CAAC;AAC9B;AAACwB,EAAA,CApBeH,QAAQ;EAAA,QAMRxB,aAAa;AAAA;AAAA,IAAAU,EAAA;AAAA4B,YAAA,CAAA5B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
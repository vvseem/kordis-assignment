{"ast":null,"code":"// export const dummyData = {\n//     headers: [\"item\", \"jan-2023\", \"feb-2023\", \"mar-2023\", \"total\"],\n//     data: {\n//         expense: { item: \"expense\", \"jan-2023\": 5, \"feb-2023\": 21, \"mar-2023\": 35, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         loss: { item: \"loss\", \"jan-2023\": 50, \"feb-2023\": 20, \"mar-2023\": 47, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         salary: { item: \"salary\", \"jan-2023\": 511, \"feb-2023\": 23, \"mar-2023\": 49, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         income: { item: \"income\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         fixedDeposit: { item: \"fixedDeposit\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" }\n//     },\n//     root: {\n//         expense: [\n//             {\n//                 loss: []\n//             }\n//         ],\n//         salary: [\n//             { income: [] },\n//             { fixedDeposit: [] }\n//         ]\n//     },\n// }\n\nexport const columns = dummyData.headers.map(e => {\n  return {\n    accessorKey: e,\n    header: () => e.toUpperCase(),\n    footer: props => props.column.id\n  };\n});\nexport const data3 = Object.keys(dummyData.data).reduce((acc, e) => {\n  acc.push(dummyData.data[e]);\n  return acc;\n}, []);\nconst dummyData = {\n  headers: [\"item\", \"jan-2023\", \"feb-2023\", \"mar-2023\", \"total\"],\n  data: {\n    expense: {\n      item: \"expense\",\n      \"jan-2023\": 5,\n      \"feb-2023\": 21,\n      \"mar-2023\": 35,\n      \"total\": \"=(((B10)+(B11))+(B12))+(B13)\"\n    },\n    loss: {\n      item: \"loss\",\n      \"jan-2023\": 50,\n      \"feb-2023\": 20,\n      \"mar-2023\": 47,\n      \"total\": \"=(((B10)+(B11))+(B12))+(B13)\"\n    },\n    salary: {\n      item: \"salary\",\n      \"jan-2023\": 511,\n      \"feb-2023\": 23,\n      \"mar-2023\": 49,\n      \"total\": \"=(((B10)+(B11))+(B12))+(B13)\"\n    },\n    income: {\n      item: \"income\",\n      \"jan-2023\": 59,\n      \"feb-2023\": 25,\n      \"mar-2023\": 45,\n      \"total\": \"=(((B10)+(B11))+(B12))+(B13)\"\n    },\n    fixedDeposit: {\n      item: \"fixedDeposit\",\n      \"jan-2023\": 59,\n      \"feb-2023\": 25,\n      \"mar-2023\": 45,\n      \"total\": \"=(((B10)+(B11))+(B12))+(B13)\"\n    }\n  },\n  root: {\n    expense: {\n      loss: {}\n    },\n    salary: {\n      income: {},\n      fixedDeposit: {}\n    }\n  }\n};\nfunction transformData(data, jsonData) {\n  const output = [];\n  for (const key in jsonData.root) {\n    const item = jsonData.data[key];\n    const subRows = transformSubRows(data, jsonData.root[key]);\n    output.push({\n      [key]: {\n        ...item,\n        subRows\n      }\n    });\n  }\n  return output;\n}\nfunction transformSubRows(data, subRowsData) {\n  const subRows = [];\n  console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvvvv\", subRowsData);\n  for (const key in subRowsData) {\n    console.log(\"TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\", key);\n    const item = data[key];\n    const a = item ? transformSubRows(data, subRowsData[key]) : undefined;\n    subRows.push({\n      [key]: {\n        ...item,\n        subRows: a\n      }\n    });\n  }\n  return subRows;\n}\nexport const result = transformData(dummyData.data, dummyData);\nconsole.log(result);","map":{"version":3,"names":["columns","dummyData","headers","map","e","accessorKey","header","toUpperCase","footer","props","column","id","data3","Object","keys","data","reduce","acc","push","expense","item","loss","salary","income","fixedDeposit","root","transformData","jsonData","output","key","subRows","transformSubRows","subRowsData","console","log","a","undefined","result"],"sources":["/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/data.js"],"sourcesContent":["\n// export const dummyData = {\n//     headers: [\"item\", \"jan-2023\", \"feb-2023\", \"mar-2023\", \"total\"],\n//     data: {\n//         expense: { item: \"expense\", \"jan-2023\": 5, \"feb-2023\": 21, \"mar-2023\": 35, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         loss: { item: \"loss\", \"jan-2023\": 50, \"feb-2023\": 20, \"mar-2023\": 47, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         salary: { item: \"salary\", \"jan-2023\": 511, \"feb-2023\": 23, \"mar-2023\": 49, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         income: { item: \"income\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n//         fixedDeposit: { item: \"fixedDeposit\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" }\n//     },\n//     root: {\n//         expense: [\n//             {\n//                 loss: []\n//             }\n//         ],\n//         salary: [\n//             { income: [] },\n//             { fixedDeposit: [] }\n//         ]\n//     },\n// }\n\n\n\nexport const columns = dummyData.headers.map(e => {\n    return {\n        accessorKey: e,\n        header: () => e.toUpperCase(),\n        footer: (props) => props.column.id,\n    }\n})\n\nexport const data3 = Object.keys(dummyData.data).reduce((acc, e) => {\n    acc.push(dummyData.data[e])\n    return acc\n}, [])\n\n\n\n\n\nconst dummyData = {\n    headers: [\"item\", \"jan-2023\", \"feb-2023\", \"mar-2023\", \"total\"],\n    data: {\n      expense: { item: \"expense\", \"jan-2023\": 5, \"feb-2023\": 21, \"mar-2023\": 35, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n      loss: { item: \"loss\", \"jan-2023\": 50, \"feb-2023\": 20, \"mar-2023\": 47, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n      salary: { item: \"salary\", \"jan-2023\": 511, \"feb-2023\": 23, \"mar-2023\": 49, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n      income: { item: \"income\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" },\n      fixedDeposit: { item: \"fixedDeposit\", \"jan-2023\": 59, \"feb-2023\": 25, \"mar-2023\": 45, \"total\": \"=(((B10)+(B11))+(B12))+(B13)\" }\n    },\n    root: {\n      expense: {\n        loss: {}\n      },\n      salary: {\n        income: {\n    \n        } ,\n        fixedDeposit: {}\n         \n    }\n    }\n  };\n  \n  function transformData(data, jsonData) {\n    const output = [];\n  \n    for (const key in jsonData.root) {\n      const item = jsonData.data[key];\n      const subRows = transformSubRows(data, jsonData.root[key]);\n  \n      output.push({\n        [key]: { ...item, subRows }\n      });\n    }\n  \n    return output;\n  }\n  \n  function transformSubRows(data, subRowsData) {\n    const subRows = [];\n  \n  console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvvvv\",subRowsData)\n      for (const key in subRowsData) {\n        console.log(\"TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\",key)\n        const item = data[key];\n        const a = item ? transformSubRows(data, subRowsData[key]) : undefined;\n        subRows.push({\n          [key]: { ...item, subRows: a }\n        });\n      }\n\n  \n    return subRows;\n  }\n  \n  export const result = transformData(dummyData.data, dummyData);\n  console.log(result);\n\n\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMA,OAAO,GAAGC,SAAS,CAACC,OAAO,CAACC,GAAG,CAACC,CAAC,IAAI;EAC9C,OAAO;IACHC,WAAW,EAAED,CAAC;IACdE,MAAM,EAAEA,CAAA,KAAMF,CAAC,CAACG,WAAW,CAAC,CAAC;IAC7BC,MAAM,EAAGC,KAAK,IAAKA,KAAK,CAACC,MAAM,CAACC;EACpC,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACb,SAAS,CAACc,IAAI,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEb,CAAC,KAAK;EAChEa,GAAG,CAACC,IAAI,CAACjB,SAAS,CAACc,IAAI,CAACX,CAAC,CAAC,CAAC;EAC3B,OAAOa,GAAG;AACd,CAAC,EAAE,EAAE,CAAC;AAMN,MAAMhB,SAAS,GAAG;EACdC,OAAO,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;EAC9Da,IAAI,EAAE;IACJI,OAAO,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAE,UAAU,EAAE,CAAC;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,OAAO,EAAE;IAA+B,CAAC;IACpHC,IAAI,EAAE;MAAED,IAAI,EAAE,MAAM;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,OAAO,EAAE;IAA+B,CAAC;IAC/GE,MAAM,EAAE;MAAEF,IAAI,EAAE,QAAQ;MAAE,UAAU,EAAE,GAAG;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,OAAO,EAAE;IAA+B,CAAC;IACpHG,MAAM,EAAE;MAAEH,IAAI,EAAE,QAAQ;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,OAAO,EAAE;IAA+B,CAAC;IACnHI,YAAY,EAAE;MAAEJ,IAAI,EAAE,cAAc;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,UAAU,EAAE,EAAE;MAAE,OAAO,EAAE;IAA+B;EAChI,CAAC;EACDK,IAAI,EAAE;IACJN,OAAO,EAAE;MACPE,IAAI,EAAE,CAAC;IACT,CAAC;IACDC,MAAM,EAAE;MACNC,MAAM,EAAE,CAER,CAAC;MACDC,YAAY,EAAE,CAAC;IAEnB;EACA;AACF,CAAC;AAED,SAASE,aAAaA,CAACX,IAAI,EAAEY,QAAQ,EAAE;EACrC,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,MAAMC,GAAG,IAAIF,QAAQ,CAACF,IAAI,EAAE;IAC/B,MAAML,IAAI,GAAGO,QAAQ,CAACZ,IAAI,CAACc,GAAG,CAAC;IAC/B,MAAMC,OAAO,GAAGC,gBAAgB,CAAChB,IAAI,EAAEY,QAAQ,CAACF,IAAI,CAACI,GAAG,CAAC,CAAC;IAE1DD,MAAM,CAACV,IAAI,CAAC;MACV,CAACW,GAAG,GAAG;QAAE,GAAGT,IAAI;QAAEU;MAAQ;IAC5B,CAAC,CAAC;EACJ;EAEA,OAAOF,MAAM;AACf;AAEA,SAASG,gBAAgBA,CAAChB,IAAI,EAAEiB,WAAW,EAAE;EAC3C,MAAMF,OAAO,GAAG,EAAE;EAEpBG,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAACF,WAAW,CAAC;EAClD,KAAK,MAAMH,GAAG,IAAIG,WAAW,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAACL,GAAG,CAAC;IAC9D,MAAMT,IAAI,GAAGL,IAAI,CAACc,GAAG,CAAC;IACtB,MAAMM,CAAC,GAAGf,IAAI,GAAGW,gBAAgB,CAAChB,IAAI,EAAEiB,WAAW,CAACH,GAAG,CAAC,CAAC,GAAGO,SAAS;IACrEN,OAAO,CAACZ,IAAI,CAAC;MACX,CAACW,GAAG,GAAG;QAAE,GAAGT,IAAI;QAAEU,OAAO,EAAEK;MAAE;IAC/B,CAAC,CAAC;EACJ;EAGF,OAAOL,OAAO;AAChB;AAEA,OAAO,MAAMO,MAAM,GAAGX,aAAa,CAACzB,SAAS,CAACc,IAAI,EAAEd,SAAS,CAAC;AAC9DgC,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
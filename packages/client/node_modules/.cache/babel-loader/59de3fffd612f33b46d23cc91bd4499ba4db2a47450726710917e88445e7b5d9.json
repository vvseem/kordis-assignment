{"ast":null,"code":"import { faker } from '@faker-js/faker';\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst newPerson = () => {\n  return {\n    data: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    age: faker.datatype.number(40),\n    visits: faker.datatype.number(1000),\n    progress: faker.datatype.number(100),\n    status: faker.helpers.shuffle(['relationship', 'complicated', 'single'])[0]\n  };\n};\nexport function makeData() {\n  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {\n    lens[_key] = arguments[_key];\n  }\n  const makeDataLevel = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const len = lens[depth];\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n  return makeDataLevel();\n}","map":{"version":3,"names":["faker","range","len","arr","i","push","newPerson","data","name","firstName","lastName","age","datatype","number","visits","progress","status","helpers","shuffle","makeData","_len","arguments","length","lens","Array","_key","makeDataLevel","depth","undefined","map","d","subRows"],"sources":["/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/makeData.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker'\n\nexport type Person = {\n  data: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: 'relationship' | 'complicated' | 'single'\n  subRows?: Person[]\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = (): Person => {\n  return {\n    data: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    age: faker.datatype.number(40),\n    visits: faker.datatype.number(1000),\n    progress: faker.datatype.number(100),\n    status: faker.helpers.shuffle<Person['status']>([\n      'relationship',\n      'complicated',\n      'single',\n    ])[0]!,\n  }\n}\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iBAAiB;AAYvC,MAAMC,KAAK,GAAIC,GAAW,IAAK;EAC7B,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5BD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;EACb;EACA,OAAOD,GAAG;AACZ,CAAC;AAED,MAAMG,SAAS,GAAGA,CAAA,KAAc;EAC9B,OAAO;IACLC,IAAI,EAAEP,KAAK,CAACQ,IAAI,CAACC,SAAS,CAAC,CAAC;IAC5BC,QAAQ,EAAEV,KAAK,CAACQ,IAAI,CAACE,QAAQ,CAAC,CAAC;IAC/BC,GAAG,EAAEX,KAAK,CAACY,QAAQ,CAACC,MAAM,CAAC,EAAE,CAAC;IAC9BC,MAAM,EAAEd,KAAK,CAACY,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IACnCE,QAAQ,EAAEf,KAAK,CAACY,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;IACpCG,MAAM,EAAEhB,KAAK,CAACiB,OAAO,CAACC,OAAO,CAAmB,CAC9C,cAAc,EACd,aAAa,EACb,QAAQ,CACT,CAAC,CAAC,CAAC;EACN,CAAC;AACH,CAAC;AAED,OAAO,SAASC,QAAQA,CAAA,EAAoB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC9B,MAAMC,aAAa,GAAG,SAAAA,CAAA,EAAyB;IAAA,IAAxBC,KAAK,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAG,CAAC;IAC9B,MAAMnB,GAAG,GAAGqB,IAAI,CAACI,KAAK,CAAE;IACxB,OAAO1B,KAAK,CAACC,GAAG,CAAC,CAAC2B,GAAG,CAAEC,CAAC,IAAa;MACnC,OAAO;QACL,GAAGxB,SAAS,CAAC,CAAC;QACdyB,OAAO,EAAER,IAAI,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGD,aAAa,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGC;MACxD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OAAOF,aAAa,CAAC,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
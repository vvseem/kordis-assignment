{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Learning/assignment/kordis 2/packages/client/src/SpreadSheet/getColumns.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getComputedCell = (row, column, originalRows, computedRows) => {\n  var _eval;\n  computedRows[row] = {\n    ...computedRows[row],\n    [column]: (_eval = eval(originalRows[row][column].replace(/'(.+?)'&'(.+?)'/g, (_, _row, _column) => {\n      var _computedRows$_row$_c, _computedRows$_row;\n      return (_computedRows$_row$_c = computedRows === null || computedRows === void 0 ? void 0 : (_computedRows$_row = computedRows[_row]) === null || _computedRows$_row === void 0 ? void 0 : _computedRows$_row[_column]) !== null && _computedRows$_row$_c !== void 0 ? _computedRows$_row$_c : getComputedCell(_row, _column, originalRows, computedRows);\n    }))) !== null && _eval !== void 0 ? _eval : 0\n  };\n  return computedRows[row][column];\n};\nconst ItemCell = _ref => {\n  let {\n    row,\n    getValue\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: `${row.depth * 2}rem`\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [row.getCanExpand() ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: row.getToggleExpandedHandler(),\n        style: {\n          cursor: \"pointer\"\n        },\n        children: row.getIsExpanded() ? \"^\" : \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this) : \"\", getValue()]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = ItemCell;\nconst getColumns = data => {\n  const computedRows = {};\n  return data === null || data === void 0 ? void 0 : data.headers.map(header => {\n    return {\n      accessorFn: row => {\n        if (e !== \"item\") return getComputedCell(row.index, e, data.data, {}).toFixed(2);\n        return row[e];\n      },\n      accessorKey: e,\n      ...(e === \"item\" && {\n        cell: _ref2 => {\n          let {\n            row,\n            getValue\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(ItemCell, {\n            row: row,\n            getValue: getValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 38\n          }, this);\n        }\n      }),\n      header: () => e.toUpperCase(),\n      footer: props => props.column.id\n    };\n  });\n};\nexport default getColumns;\nvar _c;\n$RefreshReg$(_c, \"ItemCell\");","map":{"version":3,"names":["getComputedCell","row","column","originalRows","computedRows","_eval","eval","replace","_","_row","_column","_computedRows$_row$_c","_computedRows$_row","ItemCell","_ref","getValue","_jsxDEV","style","paddingLeft","depth","children","_Fragment","getCanExpand","onClick","getToggleExpandedHandler","cursor","getIsExpanded","fileName","_jsxFileName","lineNumber","columnNumber","_c","getColumns","data","headers","map","header","accessorFn","e","index","toFixed","accessorKey","cell","_ref2","toUpperCase","footer","props","id","$RefreshReg$"],"sources":["/Users/dev/Learning/assignment/kordis 2/packages/client/src/SpreadSheet/getColumns.js"],"sourcesContent":["const getComputedCell = (row, column, originalRows, computedRows) => {\n  computedRows[row] = {\n    ...computedRows[row],\n    [column]:\n      eval(\n        originalRows[row][column].replace(\n          /'(.+?)'&'(.+?)'/g,\n          (_, _row, _column) => {\n            return (\n              computedRows?.[_row]?.[_column] ??\n              getComputedCell(_row, _column, originalRows, computedRows)\n            );\n          }\n        )\n      ) ?? 0,\n  };\n\n  return computedRows[row][column];\n};\n\nconst ItemCell = ({ row, getValue }) => {\n  return (\n    <div\n      style={{\n        paddingLeft: `${row.depth * 2}rem`,\n      }}\n    >\n      <>\n        {row.getCanExpand() ? (\n          <button\n            {...{\n              onClick: row.getToggleExpandedHandler(),\n              style: { cursor: \"pointer\" },\n            }}\n          >\n            {row.getIsExpanded() ? \"^\" : \">\"}\n          </button>\n        ) : (\n          \"\"\n        )}\n        {getValue()}\n      </>\n    </div>\n  );\n};\n\nconst getColumns = (data) => {\n  const computedRows = {};\n\n  return data?.headers.map((header) => {\n    return {\n      accessorFn: (row) => {\n        if (e !== \"item\")\n          return getComputedCell(row.index, e, data.data, {}).toFixed(2);\n        return row[e];\n      },\n      accessorKey: e,\n      ...(e === \"item\" && {\n        cell: ({ row, getValue }) => <ItemCell row={row} getValue={getValue} />,\n      }),\n      header: () => e.toUpperCase(),\n      footer: (props) => props.column.id,\n    };\n  });\n};\n\nexport default getColumns;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
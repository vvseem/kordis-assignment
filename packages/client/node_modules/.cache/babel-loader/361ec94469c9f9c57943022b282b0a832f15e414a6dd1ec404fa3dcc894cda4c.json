{"ast":null,"code":"// export const col = (data) => {\n//   const computedRows = {};\n//\n//   return data?.headers?.map((e) => {\n//     return {\n//       accessorFn: (row) => {\n//         if (e !== \"item\")\n//           return getComputedCell(row.index, e, data.data, computedRows).toFixed(\n//             2\n//           );\n//         return row[e];\n//       },\n//       accessorKey: e,\n//       ...(e === \"item\" && {\n//         cell: ({ row, getValue }) => {\n//           return (\n//             <div\n//               style={{\n//                 paddingLeft: `${row.depth * 2}rem`,\n//               }}\n//             >\n//               <>\n//                 {row.getCanExpand() ? (\n//                   <button\n//                     {...{\n//                       onClick: row.getToggleExpandedHandler(),\n//                       style: { cursor: \"pointer\" },\n//                     }}\n//                   >\n//                     {row.getIsExpanded() ? \"^\" : \">\"}\n//                   </button>\n//                 ) : (\n//                   \"\"\n//                 )}{\" \"}\n//                 {getValue()}\n//               </>\n//             </div>\n//           );\n//         },\n//       }),\n//       header: () => e.toUpperCase(),\n//       footer: (props) => props.column.id,\n//     };\n//   });\n// };\n\nexport function transformData(data, jsonData) {\n  const output = [];\n  for (const key in jsonData.root) {\n    const item = jsonData.data[key];\n    const subRows = transformSubRows(data, jsonData.root[key]);\n    output.push({\n      [item.displayName]: {\n        ...item,\n        subRows\n      }\n    });\n  }\n  return output;\n}\nfunction transformSubRows(data, subRowsData) {\n  const subRows = [];\n  for (const key in subRowsData) {\n    const item = data[key];\n    const subRowData = item ? transformSubRows(data, subRowsData[key]) : undefined;\n    subRows.push({\n      ...item,\n      subRows: subRowData.length ? subRowData : undefined\n    });\n  }\n  return subRows;\n}","map":{"version":3,"names":["transformData","data","jsonData","output","key","root","item","subRows","transformSubRows","push","displayName","subRowsData","subRowData","undefined","length"],"sources":["/Users/dev/Learning/assignment/kordis 2/packages/client/src/SpreadSheet/data.js"],"sourcesContent":["// export const col = (data) => {\n//   const computedRows = {};\n//\n//   return data?.headers?.map((e) => {\n//     return {\n//       accessorFn: (row) => {\n//         if (e !== \"item\")\n//           return getComputedCell(row.index, e, data.data, computedRows).toFixed(\n//             2\n//           );\n//         return row[e];\n//       },\n//       accessorKey: e,\n//       ...(e === \"item\" && {\n//         cell: ({ row, getValue }) => {\n//           return (\n//             <div\n//               style={{\n//                 paddingLeft: `${row.depth * 2}rem`,\n//               }}\n//             >\n//               <>\n//                 {row.getCanExpand() ? (\n//                   <button\n//                     {...{\n//                       onClick: row.getToggleExpandedHandler(),\n//                       style: { cursor: \"pointer\" },\n//                     }}\n//                   >\n//                     {row.getIsExpanded() ? \"^\" : \">\"}\n//                   </button>\n//                 ) : (\n//                   \"\"\n//                 )}{\" \"}\n//                 {getValue()}\n//               </>\n//             </div>\n//           );\n//         },\n//       }),\n//       header: () => e.toUpperCase(),\n//       footer: (props) => props.column.id,\n//     };\n//   });\n// };\n\nexport function transformData(data, jsonData) {\n  const output = [];\n  for (const key in jsonData.root) {\n    const item = jsonData.data[key];\n    const subRows = transformSubRows(data, jsonData.root[key]);\n\n    output.push({\n      [item.displayName]: { ...item, subRows },\n    });\n  }\n  return output;\n}\n\nfunction transformSubRows(data, subRowsData) {\n  const subRows = [];\n  for (const key in subRowsData) {\n    const item = data[key];\n    const subRowData = item\n      ? transformSubRows(data, subRowsData[key])\n      : undefined;\n    subRows.push({\n      ...item,\n      subRows: subRowData.length ? subRowData : undefined,\n    });\n  }\n  return subRows;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMC,GAAG,IAAIF,QAAQ,CAACG,IAAI,EAAE;IAC/B,MAAMC,IAAI,GAAGJ,QAAQ,CAACD,IAAI,CAACG,GAAG,CAAC;IAC/B,MAAMG,OAAO,GAAGC,gBAAgB,CAACP,IAAI,EAAEC,QAAQ,CAACG,IAAI,CAACD,GAAG,CAAC,CAAC;IAE1DD,MAAM,CAACM,IAAI,CAAC;MACV,CAACH,IAAI,CAACI,WAAW,GAAG;QAAE,GAAGJ,IAAI;QAAEC;MAAQ;IACzC,CAAC,CAAC;EACJ;EACA,OAAOJ,MAAM;AACf;AAEA,SAASK,gBAAgBA,CAACP,IAAI,EAAEU,WAAW,EAAE;EAC3C,MAAMJ,OAAO,GAAG,EAAE;EAClB,KAAK,MAAMH,GAAG,IAAIO,WAAW,EAAE;IAC7B,MAAML,IAAI,GAAGL,IAAI,CAACG,GAAG,CAAC;IACtB,MAAMQ,UAAU,GAAGN,IAAI,GACnBE,gBAAgB,CAACP,IAAI,EAAEU,WAAW,CAACP,GAAG,CAAC,CAAC,GACxCS,SAAS;IACbN,OAAO,CAACE,IAAI,CAAC;MACX,GAAGH,IAAI;MACPC,OAAO,EAAEK,UAAU,CAACE,MAAM,GAAGF,UAAU,GAAGC;IAC5C,CAAC,CAAC;EACJ;EACA,OAAON,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
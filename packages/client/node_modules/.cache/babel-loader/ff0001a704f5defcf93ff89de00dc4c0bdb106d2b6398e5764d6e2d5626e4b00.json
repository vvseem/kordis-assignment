{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/Table.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from 'react';\nimport './index.css';\nimport { useReactTable, getCoreRowModel, getFilteredRowModel, getExpandedRowModel, flexRender } from '@tanstack/react-table';\n// import { makeData, Person } from './makeData'\nimport { d, columns } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst A = _ref => {\n  _s();\n  let {\n    table,\n    id,\n    index,\n    getValue\n  } = _ref;\n  const initialValue = getValue();\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  // When the input is blurred, we'll call our table meta's updateData function\n  const onBlur = () => {\n    var _table$options$meta;\n    (_table$options$meta = table.options.meta) === null || _table$options$meta === void 0 ? void 0 : _table$options$meta.updateData(index, id, value);\n  };\n\n  // If the initialValue is changed external, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: e => setValue(e.target.value),\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(A, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n_c = A;\nconst DefaultColumn = {\n  cell: _ref2 => {\n    let {\n      getValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      table\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(A, {\n      table: table,\n      id: id,\n      index: index,\n      getValue: getValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 66\n    }, this);\n  }\n};\nexport function SpreadSheetTable() {\n  _s2();\n  // const rerender = React.useReducer(() => ({}), {})[1]\n\n  // const columns = React.useMemo<ColumnDef<any>[]>(\n  //   () => [\n  //     {\n  //       accessorKey: 'data',\n  //       header: \"Data\",\n  //       cell: ({ row, getValue }: any) => {\n  //         return (\n  //         <div\n  //           style={{\n  //             paddingLeft: `${row.depth * 2}rem`,\n  //           }}\n  //         >\n  //           <>\n  //             {row.getCanExpand() ? (\n  //               <button\n  //                 {...{\n  //                   onClick: row.getToggleExpandedHandler(),\n  //                   style: { cursor: 'pointer' },\n  //                 }}\n  //               >\n  //                 {row.getIsExpanded() ? 'ðŸ‘‡' : 'ðŸ‘‰'}\n  //               </button>\n  //             ) : (\n  //               'ðŸ”µ'\n  //             )}{' '}\n  //             {getValue()}\n  //           </>\n  //         </div>\n  //       )},\n  //       footer: (props: any) => props.column.id,\n  //     },\n\n  //     {\n  //       accessorKey: \"jan\",\n  //       header: () => \"JAN\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"feb\",\n  //       header: () => \"Feb\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"mar\",\n  //       header: \"March\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"apr\",\n  //       header: \"April\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //   ],\n  //   []\n  // )\n\n  // const [data, setData] = React.useState(() => makeData(10, 5, 3))\n\n  const [expanded, setExpanded] = React.useState({});\n  const table = useReactTable({\n    data: d,\n    columns,\n    defaultColumn: DefaultColumn,\n    state: {\n      expanded\n    },\n    onExpandedChange: setExpanded,\n    getSubRows: row => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    // meta: {\n    //   updateData: (rowIndex: any, columnId: any, value: any) => {\n    //     setData((old:any) =>\n    //       old.map((row:any, index:any) => {\n    //         if (index === rowIndex) {\n    //           return {\n    //             ...old[rowIndex]!,\n    //             [columnId]: value,\n    //           }\n    //         }\n    //         return row\n    //       })\n    //     )\n    //   },\n    // },\n    debugTable: true\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: header.colSpan,\n              children: header.isPlaceholder ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: flexRender(header.column.columnDef.header, header.getContext())\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 23\n              }, this)\n            }, header.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this);\n          })\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.getVisibleCells().map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: flexRender(cell.column.columnDef.cell, cell.getContext())\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this);\n            })\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s2(SpreadSheetTable, \"sBvf4/GXlnoG6oky53pcDNJ0pJM=\", false, function () {\n  return [useReactTable];\n});\n_c2 = SpreadSheetTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"A\");\n$RefreshReg$(_c2, \"SpreadSheetTable\");","map":{"version":3,"names":["React","useReactTable","getCoreRowModel","getFilteredRowModel","getExpandedRowModel","flexRender","d","columns","jsxDEV","_jsxDEV","A","_ref","_s","table","id","index","getValue","initialValue","value","setValue","useState","onBlur","_table$options$meta","options","meta","updateData","useEffect","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","DefaultColumn","cell","_ref2","row","column","SpreadSheetTable","_s2","expanded","setExpanded","data","defaultColumn","state","onExpandedChange","getSubRows","subRows","debugTable","className","children","getHeaderGroups","map","headerGroup","headers","header","colSpan","isPlaceholder","columnDef","getContext","getRowModel","rows","getVisibleCells","_c2","$RefreshReg$"],"sources":["/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/Table.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react'\n\nimport './index.css'\n\nimport {\n  Column,\n  Table,\n  ExpandedState,\n  useReactTable,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getFilteredRowModel,\n  getExpandedRowModel,\n  ColumnDef,\n  flexRender,\n  RowData\n} from '@tanstack/react-table'\n// import { makeData, Person } from './makeData'\nimport { d,columns } from './data'\nimport { makeData } from './makeData'\n\ndeclare module '@tanstack/react-table' {\n  interface TableMeta<TData extends RowData> {\n    updateData: (rowIndex: number, columnId: string, value: unknown) => void\n  }\n}\n\n\nconst A = ({ table, id, index, getValue }: any) => {\n  const initialValue = getValue()\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue)\n\n  // When the input is blurred, we'll call our table meta's updateData function\n  const onBlur = () => {\n    table.options.meta?.updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      value={value as string}\n      onChange={e => setValue(e.target.value)}\n      onBlur={onBlur}\n    />\n  )\n}\n\nconst DefaultColumn: Partial<ColumnDef<any>> = {\n  cell: ({ getValue, row: { index }, column: { id }, table }) => <A table={table} id={id} index={index} getValue={getValue} />,\n}\n\n\n\nexport function SpreadSheetTable() {\n  // const rerender = React.useReducer(() => ({}), {})[1]\n\n  // const columns = React.useMemo<ColumnDef<any>[]>(\n  //   () => [\n  //     {\n  //       accessorKey: 'data',\n  //       header: \"Data\",\n  //       cell: ({ row, getValue }: any) => {\n  //         return (\n  //         <div\n  //           style={{\n  //             paddingLeft: `${row.depth * 2}rem`,\n  //           }}\n  //         >\n  //           <>\n  //             {row.getCanExpand() ? (\n  //               <button\n  //                 {...{\n  //                   onClick: row.getToggleExpandedHandler(),\n  //                   style: { cursor: 'pointer' },\n  //                 }}\n  //               >\n  //                 {row.getIsExpanded() ? 'ðŸ‘‡' : 'ðŸ‘‰'}\n  //               </button>\n  //             ) : (\n  //               'ðŸ”µ'\n  //             )}{' '}\n  //             {getValue()}\n  //           </>\n  //         </div>\n  //       )},\n  //       footer: (props: any) => props.column.id,\n  //     },\n\n  //     {\n  //       accessorKey: \"jan\",\n  //       header: () => \"JAN\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"feb\",\n  //       header: () => \"Feb\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"mar\",\n  //       header: \"March\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //     {\n  //       accessorKey: \"apr\",\n  //       header: \"April\",\n  //       footer: (props: any) => props.column.id,\n  //     },\n  //   ],\n  //   []\n  // )\n\n  // const [data, setData] = React.useState(() => makeData(10, 5, 3))\n\n  const [expanded, setExpanded] = React.useState<ExpandedState>({})\n  const table = useReactTable({\n    data:d,\n    columns,\n    defaultColumn: DefaultColumn,\n    state: {\n      expanded,\n    },\n    onExpandedChange: setExpanded,\n    getSubRows: (row: any) => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    // meta: {\n    //   updateData: (rowIndex: any, columnId: any, value: any) => {\n    //     setData((old:any) =>\n    //       old.map((row:any, index:any) => {\n    //         if (index === rowIndex) {\n    //           return {\n    //             ...old[rowIndex]!,\n    //             [columnId]: value,\n    //           }\n    //         }\n    //         return row\n    //       })\n    //     )\n    //   },\n    // },\n    debugTable: true,\n  })\n\n  return (\n    <div className=\"p-2\">\n      <div className=\"h-2\" />\n      <table>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup: any) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header: any) => {\n                return (\n                  <th key={header.id} colSpan={header.colSpan}>\n                    {header.isPlaceholder ? null : (\n                      <div>\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                        {/* {header.column.getCanFilter() ? (\n                          <div>\n                            <Filter column={header.column} table={table} />\n                          </div>\n                        ) : null} */}\n                      </div>\n                    )}\n                  </th>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row: any) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell: any) => {\n                  return (\n                    <td key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"h-2\" />\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
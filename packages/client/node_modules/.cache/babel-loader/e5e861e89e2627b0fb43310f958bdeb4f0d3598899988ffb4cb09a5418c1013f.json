{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Downloads/spreadsheet-app/src/customHook/useCreAteTable.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from 'react';\nimport { useReactTable, getCoreRowModel, getExpandedRowModel, flexRender } from '@tanstack/react-table';\n// import { makeData, Person } from './makeData'\nimport { dee, col } from '../Spreadsheet/data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableInput = _ref => {\n  _s();\n  let {\n    table,\n    id,\n    index,\n    getValue\n  } = _ref;\n  const initialValue = getValue();\n  const [value, setValue] = React.useState(initialValue);\n  const onBlur = () => {\n    var _table$options$meta;\n    (_table$options$meta = table.options.meta) === null || _table$options$meta === void 0 ? void 0 : _table$options$meta.updateData(index, id, value);\n  };\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: e => setValue(e.target.value),\n    onBlur: onBlur,\n    style: {\n      border: \"none\",\n      borderRadius: 5,\n      padding: \"2px\",\n      color: \"#333\",\n      backgroundColor: \"#E5E4E2\",\n      outline: \"none\",\n      textAlign: \"center\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(EditableInput, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n_c = EditableInput;\nconst defaultColumn = {\n  cell: _ref2 => {\n    let {\n      getValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      table\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(EditableInput, {\n      table: table,\n      id: id,\n      index: index,\n      getValue: getValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  }\n};\nexport function useTable() {\n  _s2();\n  const columns = React.useMemo(() => col, []);\n  const table = useReactTable({\n    data: dee,\n    columns,\n    defaultColumn,\n    getSubRows: row => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex, columnId, value) => {\n        console.log(\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\", rowIndex, columnId, value);\n      }\n    },\n    debugTable: true\n  });\n  return {\n    table,\n    flexRender\n  };\n}\n_s2(useTable, \"4hPNPOVD6NmFgooi8etqClAnRtQ=\", false, function () {\n  return [useReactTable];\n});\nvar _c;\n$RefreshReg$(_c, \"EditableInput\");","map":{"version":3,"names":["React","useReactTable","getCoreRowModel","getExpandedRowModel","flexRender","dee","col","jsxDEV","_jsxDEV","EditableInput","_ref","_s","table","id","index","getValue","initialValue","value","setValue","useState","onBlur","_table$options$meta","options","meta","updateData","useEffect","onChange","e","target","style","border","borderRadius","padding","color","backgroundColor","outline","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","_c","defaultColumn","cell","_ref2","row","column","useTable","_s2","columns","useMemo","data","getSubRows","subRows","rowIndex","columnId","console","log","debugTable","$RefreshReg$"],"sources":["/home/ubuntu/Downloads/spreadsheet-app/src/customHook/useCreAteTable.tsx"],"sourcesContent":["import React from 'react'\n\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getExpandedRowModel,\n  ColumnDef,\n  flexRender,\n  RowData\n} from '@tanstack/react-table'\n// import { makeData, Person } from './makeData'\nimport { dee, col } from '../Spreadsheet/data'\n\ndeclare module '@tanstack/react-table' {\n  interface TableMeta<TData extends RowData> {\n    updateData: (rowIndex: number, columnId: string, value: unknown) => void\n  }\n}\n\nconst EditableInput = ({ table, id, index, getValue }: any) => {\n  const initialValue = getValue()\n  const [value, setValue] = React.useState(initialValue)\n\n  const onBlur = () => {\n    table.options.meta?.updateData(index, id, value)\n  }\n\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      value={value as string}\n      onChange={e => setValue(e.target.value)}\n      onBlur={onBlur}\n      style={{\n        border: \"none\",\n        borderRadius: 5,\n        padding: \"2px\",\n        color: \"#333\",\n        backgroundColor: \"#E5E4E2\",\n        outline: \"none\",\n        textAlign: \"center\"\n      }}\n    />\n  )\n}\n\nconst defaultColumn: Partial<ColumnDef<any>> = {\n  cell: ({ \n    getValue,\n    row: { index },\n    column: { id },\n    table \n  }) => <EditableInput table={table} id={id} index={index} getValue={getValue} />,\n}\n\nexport function useTable() {\n  const columns = React.useMemo<ColumnDef<any>[]>(\n    () => col,\n    []\n  )\n\n  const table = useReactTable({\n    data: dee as any,\n    columns,\n    defaultColumn,\n    getSubRows: (row: any) => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex: any, columnId: any, value: any) => {\n        console.log(\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\", rowIndex, columnId, value)\n      },\n    },\n    debugTable: true,\n  })\n  return { table, flexRender }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
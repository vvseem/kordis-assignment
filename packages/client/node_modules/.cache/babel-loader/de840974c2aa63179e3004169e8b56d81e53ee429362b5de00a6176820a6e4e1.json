{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/Table.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from 'react';\nimport './index.css';\nimport { useReactTable, getCoreRowModel, getFilteredRowModel, getExpandedRowModel, flexRender } from '@tanstack/react-table';\n// import { makeData, Person } from './makeData'\nimport { dee, col } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst A = _ref => {\n  _s();\n  let {\n    table,\n    id,\n    index,\n    getValue\n  } = _ref;\n  const initialValue = getValue();\n  const [value, setValue] = React.useState(initialValue);\n  const onBlur = () => {\n    var _table$options$meta;\n    (_table$options$meta = table.options.meta) === null || _table$options$meta === void 0 ? void 0 : _table$options$meta.updateData(index, id, value);\n  };\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: e => setValue(e.target.value),\n    onBlur: onBlur,\n    style: {\n      border: \"none\",\n      padding: \"2px\",\n      color: \"#333\",\n      backgroundColor: \"transparent\",\n      outline: \"none\",\n      textAlign: \"center\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(A, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n_c = A;\nconst defaultColumn = {\n  cell: _ref2 => {\n    let {\n      getValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      table\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(A, {\n      table: table,\n      id: id,\n      index: index,\n      getValue: getValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 66\n    }, this);\n  }\n};\nexport function SpreadSheetTable() {\n  _s2();\n  const columns = React.useMemo(() => col, []);\n  // const [data, setData] = React.useState(() => makeData(10, 5, 3))\n  // console.log(data)\n\n  const [expanded, setExpanded] = React.useState({});\n  const table = useReactTable({\n    data: dee,\n    columns,\n    defaultColumn,\n    state: {\n      expanded\n    },\n    onExpandedChange: setExpanded,\n    getSubRows: row => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex, columnId, value) => {\n        console.log(\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\", rowIndex, columnId, value);\n      }\n    },\n    debugTable: true\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: header.colSpan,\n              children: header.isPlaceholder ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: flexRender(header.column.columnDef.header, header.getContext())\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 23\n              }, this)\n            }, header.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this);\n          })\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.getVisibleCells().map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: flexRender(cell.column.columnDef.cell, cell.getContext())\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this);\n            })\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s2(SpreadSheetTable, \"VqdTiehQNVIZDVoy3ZS7zIDMDzo=\", false, function () {\n  return [useReactTable];\n});\n_c2 = SpreadSheetTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"A\");\n$RefreshReg$(_c2, \"SpreadSheetTable\");","map":{"version":3,"names":["React","useReactTable","getCoreRowModel","getFilteredRowModel","getExpandedRowModel","flexRender","dee","col","jsxDEV","_jsxDEV","A","_ref","_s","table","id","index","getValue","initialValue","value","setValue","useState","onBlur","_table$options$meta","options","meta","updateData","useEffect","onChange","e","target","style","border","padding","color","backgroundColor","outline","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","_c","defaultColumn","cell","_ref2","row","column","SpreadSheetTable","_s2","columns","useMemo","expanded","setExpanded","data","state","onExpandedChange","getSubRows","subRows","rowIndex","columnId","console","log","debugTable","className","children","getHeaderGroups","map","headerGroup","headers","header","colSpan","isPlaceholder","columnDef","getContext","getRowModel","rows","getVisibleCells","_c2","$RefreshReg$"],"sources":["/home/ubuntu/Desktop/SpreadSheet/spreadsheet-app/src/Spreadsheet/Table.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react'\n\nimport './index.css'\n\nimport {\n  ExpandedState,\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getExpandedRowModel,\n  ColumnDef,\n  flexRender,\n  RowData\n} from '@tanstack/react-table'\n// import { makeData, Person } from './makeData'\nimport { dee,col } from './data'\nimport { makeData } from './makeData'\n\ndeclare module '@tanstack/react-table' {\n  interface TableMeta<TData extends RowData> {\n    updateData: (rowIndex: number, columnId: string, value: unknown) => void\n  }\n}\n\n\nconst A = ({ table, id, index, getValue }: any) => {\n  const initialValue = getValue()\n  const [value, setValue] = React.useState(initialValue)\n\n  const onBlur = () => {\n    table.options.meta?.updateData(index, id, value)\n  }\n\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      value={value as string}\n      onChange={e => setValue(e.target.value)}\n      onBlur={onBlur}\n      style={{\n          border: \"none\",\n          padding: \"2px\",\n          color: \"#333\",\n          backgroundColor: \"transparent\",\n          outline: \"none\",\n          textAlign: \"center\"\n      }}\n    />\n  )\n}\n\nconst defaultColumn: Partial<ColumnDef<any>> = {\n  cell: ({ getValue, row: { index }, column: { id }, table }) => <A table={table} id={id} index={index} getValue={getValue} />,\n}\n\n\n\nexport function SpreadSheetTable() {\n    const columns = React.useMemo<ColumnDef<any>[]>(\n    () => col,\n    []\n  )\n  // const [data, setData] = React.useState(() => makeData(10, 5, 3))\n  // console.log(data)\n\n  const [expanded, setExpanded] = React.useState<ExpandedState>({})\n  const table = useReactTable({\n    data:dee as any,\n    columns,\n    defaultColumn,\n    state: {\n      expanded,\n    },\n    onExpandedChange: setExpanded,\n    getSubRows: (row: any) => row.subRows,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    meta: {\n      updateData: (rowIndex: any, columnId: any, value: any) => {\n        console.log(\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\",rowIndex, columnId, value)\n      },\n    },\n    debugTable: true,\n  })\n\n  return (\n    <div className=\"p-2\">\n      <div className=\"h-2\" />\n      <table>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup: any) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header: any) => {\n                return (\n                  <th key={header.id} colSpan={header.colSpan}>\n                    {header.isPlaceholder ? null : (\n                      <div>\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                      </div>\n                    )}\n                  </th>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row: any) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell: any) => {\n                  return (\n                    <td key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"h-2\" />\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}